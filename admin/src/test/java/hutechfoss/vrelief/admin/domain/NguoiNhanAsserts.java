package hutechfoss.vrelief.admin.domain;

import static hutechfoss.vrelief.admin.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class NguoiNhanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNguoiNhanAllPropertiesEquals(NguoiNhan expected, NguoiNhan actual) {
        assertNguoiNhanAutoGeneratedPropertiesEquals(expected, actual);
        assertNguoiNhanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNguoiNhanAllUpdatablePropertiesEquals(NguoiNhan expected, NguoiNhan actual) {
        assertNguoiNhanUpdatableFieldsEquals(expected, actual);
        assertNguoiNhanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNguoiNhanAutoGeneratedPropertiesEquals(NguoiNhan expected, NguoiNhan actual) {
        assertThat(expected)
            .as("Verify NguoiNhan auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNguoiNhanUpdatableFieldsEquals(NguoiNhan expected, NguoiNhan actual) {
        assertThat(expected)
            .as("Verify NguoiNhan relevant properties")
            .satisfies(e -> assertThat(e.getTenNguoiNhan()).as("check tenNguoiNhan").isEqualTo(actual.getTenNguoiNhan()))
            .satisfies(e -> assertThat(e.getSoDienThoai()).as("check soDienThoai").isEqualTo(actual.getSoDienThoai()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getDiaChi()).as("check diaChi").isEqualTo(actual.getDiaChi()))
            .satisfies(e -> assertThat(e.getVungId()).as("check vungId").isEqualTo(actual.getVungId()))
            .satisfies(e -> assertThat(e.getSoNguoiNhan()).as("check soNguoiNhan").isEqualTo(actual.getSoNguoiNhan()))
            .satisfies(e ->
                assertThat(e.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(e ->
                assertThat(e.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getUpdatedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNguoiNhanUpdatableRelationshipsEquals(NguoiNhan expected, NguoiNhan actual) {
        // empty method
    }
}
