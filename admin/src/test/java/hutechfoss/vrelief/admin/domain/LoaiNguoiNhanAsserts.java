package hutechfoss.vrelief.admin.domain;

import static hutechfoss.vrelief.admin.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class LoaiNguoiNhanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoaiNguoiNhanAllPropertiesEquals(LoaiNguoiNhan expected, LoaiNguoiNhan actual) {
        assertLoaiNguoiNhanAutoGeneratedPropertiesEquals(expected, actual);
        assertLoaiNguoiNhanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoaiNguoiNhanAllUpdatablePropertiesEquals(LoaiNguoiNhan expected, LoaiNguoiNhan actual) {
        assertLoaiNguoiNhanUpdatableFieldsEquals(expected, actual);
        assertLoaiNguoiNhanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoaiNguoiNhanAutoGeneratedPropertiesEquals(LoaiNguoiNhan expected, LoaiNguoiNhan actual) {
        assertThat(expected)
            .as("Verify LoaiNguoiNhan auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoaiNguoiNhanUpdatableFieldsEquals(LoaiNguoiNhan expected, LoaiNguoiNhan actual) {
        assertThat(expected)
            .as("Verify LoaiNguoiNhan relevant properties")
            .satisfies(e -> assertThat(e.getTenLoai()).as("check tenLoai").isEqualTo(actual.getTenLoai()))
            .satisfies(e -> assertThat(e.getMoTa()).as("check moTa").isEqualTo(actual.getMoTa()))
            .satisfies(e ->
                assertThat(e.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(e ->
                assertThat(e.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getUpdatedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoaiNguoiNhanUpdatableRelationshipsEquals(LoaiNguoiNhan expected, LoaiNguoiNhan actual) {
        // empty method
    }
}
