package hutechfoss.vrelief.admin.domain;

import static hutechfoss.vrelief.admin.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class NhuYeuPhamAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNhuYeuPhamAllPropertiesEquals(NhuYeuPham expected, NhuYeuPham actual) {
        assertNhuYeuPhamAutoGeneratedPropertiesEquals(expected, actual);
        assertNhuYeuPhamAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNhuYeuPhamAllUpdatablePropertiesEquals(NhuYeuPham expected, NhuYeuPham actual) {
        assertNhuYeuPhamUpdatableFieldsEquals(expected, actual);
        assertNhuYeuPhamUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNhuYeuPhamAutoGeneratedPropertiesEquals(NhuYeuPham expected, NhuYeuPham actual) {
        assertThat(expected)
            .as("Verify NhuYeuPham auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNhuYeuPhamUpdatableFieldsEquals(NhuYeuPham expected, NhuYeuPham actual) {
        assertThat(expected)
            .as("Verify NhuYeuPham relevant properties")
            .satisfies(e -> assertThat(e.getTenNhuYeuPham()).as("check tenNhuYeuPham").isEqualTo(actual.getTenNhuYeuPham()))
            .satisfies(e -> assertThat(e.getDonViTinh()).as("check donViTinh").isEqualTo(actual.getDonViTinh()))
            .satisfies(e -> assertThat(e.getLoaiNhuYeuPhamId()).as("check loaiNhuYeuPhamId").isEqualTo(actual.getLoaiNhuYeuPhamId()))
            .satisfies(e -> assertThat(e.getMucCanhBao()).as("check mucCanhBao").isEqualTo(actual.getMucCanhBao()))
            .satisfies(e ->
                assertThat(e.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(e ->
                assertThat(e.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getUpdatedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNhuYeuPhamUpdatableRelationshipsEquals(NhuYeuPham expected, NhuYeuPham actual) {
        // empty method
    }
}
