package hutechfoss.vrelief.admin.domain;

import static hutechfoss.vrelief.admin.domain.AssertUtils.bigDecimalCompareTo;
import static hutechfoss.vrelief.admin.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class VungAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVungAllPropertiesEquals(Vung expected, Vung actual) {
        assertVungAutoGeneratedPropertiesEquals(expected, actual);
        assertVungAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVungAllUpdatablePropertiesEquals(Vung expected, Vung actual) {
        assertVungUpdatableFieldsEquals(expected, actual);
        assertVungUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVungAutoGeneratedPropertiesEquals(Vung expected, Vung actual) {
        assertThat(expected)
            .as("Verify Vung auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVungUpdatableFieldsEquals(Vung expected, Vung actual) {
        assertThat(expected)
            .as("Verify Vung relevant properties")
            .satisfies(e -> assertThat(e.getTenVung()).as("check tenVung").isEqualTo(actual.getTenVung()))
            .satisfies(e -> assertThat(e.getLat()).as("check lat").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getLat()))
            .satisfies(e -> assertThat(e.getLng()).as("check lng").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getLng()))
            .satisfies(e -> assertThat(e.getLoaiThienTaiId()).as("check loaiThienTaiId").isEqualTo(actual.getLoaiThienTaiId()))
            .satisfies(e -> assertThat(e.getSoDan()).as("check soDan").isEqualTo(actual.getSoDan()))
            .satisfies(e ->
                assertThat(e.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(e ->
                assertThat(e.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getUpdatedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVungUpdatableRelationshipsEquals(Vung expected, Vung actual) {
        // empty method
    }
}
